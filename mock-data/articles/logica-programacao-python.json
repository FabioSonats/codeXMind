{
  "id": "4",
  "title": "Lógica de Programação com Python",
  "slug": "logica-programacao-python",
  "excerpt": "Aprenda os fundamentos da lógica de programação usando Python como linguagem de ensino",
  "content": "# Lógica de Programação com Python\n\nA lógica de programação é a base fundamental para qualquer desenvolvedor. Python, com sua sintaxe clara e legível, é uma excelente linguagem para aprender esses conceitos essenciais.\n\n## O que é Lógica de Programação?\n\nLógica de programação é o conjunto de regras e conceitos que permitem criar algoritmos eficientes e soluções para problemas computacionais. É o pensamento estruturado que transforma uma ideia em código executável.\n\n## Variáveis e Tipos de Dados\n\n### Declaração de Variáveis\nEm Python, as variáveis são criadas automaticamente quando você atribui um valor:\n\n```python\n# Variáveis básicas\nnome = \"João\"\nidade = 25\naltura = 1.75\nativo = True\n\n# Tipos de dados\nprint(type(nome))    # <class 'str'>\nprint(type(idade))   # <class 'int'>\nprint(type(altura))  # <class 'float'>\nprint(type(ativo))   # <class 'bool'>\n```\n\n### Tipos de Dados Fundamentais\n```python\n# String (texto)\ntexto = \"Olá, mundo!\"\ntexto_multilinha = \"\"\"\nEste é um texto\nque ocupa várias linhas\n\"\"\"\n\n# Números inteiros\nnumero_inteiro = 42\nnumero_negativo = -10\n\n# Números decimais\npreco = 19.99\npi = 3.14159\n\n# Booleanos\nverdadeiro = True\nfalso = False\n\n# Listas\nfrutas = [\"maçã\", \"banana\", \"laranja\"]\nnumeros = [1, 2, 3, 4, 5]\n\n# Dicionários\npessoa = {\n    \"nome\": \"Maria\",\n    \"idade\": 30,\n    \"cidade\": \"São Paulo\"\n}\n```\n\n## Estruturas de Controle\n\n### Condicionais (if, elif, else)\n```python\n# Estrutura básica\nidade = 18\n\nif idade >= 18:\n    print(\"Maior de idade\")\nelif idade >= 16:\n    print(\"Pode votar\")\nelse:\n    print(\"Menor de idade\")\n\n# Operadores lógicos\nnota = 8.5\nfrequencia = 85\n\nif nota >= 7 and frequencia >= 75:\n    print(\"Aprovado\")\nelif nota >= 5 or frequencia >= 90:\n    print(\"Recuperação\")\nelse:\n    print(\"Reprovado\")\n```\n\n### Loops (for e while)\n```python\n# Loop for - iterando sobre uma lista\nfrutas = [\"maçã\", \"banana\", \"laranja\"]\nfor fruta in frutas:\n    print(f\"Fruta: {fruta}\")\n\n# Loop for com range\nfor i in range(5):\n    print(f\"Número: {i}\")\n\n# Loop while\ncontador = 0\nwhile contador < 5:\n    print(f\"Contador: {contador}\")\n    contador += 1\n\n# Loop com break e continue\nfor numero in range(10):\n    if numero == 3:\n        continue  # Pula o número 3\n    if numero == 7:\n        break     # Para no número 7\n    print(numero)\n```\n\n## Funções\n\n### Criando Funções\n```python\n# Função simples\ndef saudacao():\n    print(\"Olá, mundo!\")\n\n# Função com parâmetros\ndef saudacao_personalizada(nome):\n    return f\"Olá, {nome}!\"\n\n# Função com múltiplos parâmetros\ndef calcular_area(comprimento, largura):\n    area = comprimento * largura\n    return area\n\n# Função com parâmetros opcionais\ndef apresentar(nome, idade=None):\n    if idade:\n        return f\"Meu nome é {nome} e tenho {idade} anos\"\n    else:\n        return f\"Meu nome é {nome}\"\n\n# Chamando as funções\nsaudacao()\nmensagem = saudacao_personalizada(\"Ana\")\narea = calcular_area(5, 3)\napresentacao = apresentar(\"Carlos\", 25)\n```\n\n## Estruturas de Dados\n\n### Listas\n```python\n# Criando e manipulando listas\nnumeros = [1, 2, 3, 4, 5]\n\n# Adicionando elementos\nnumeros.append(6)           # [1, 2, 3, 4, 5, 6]\nnumeros.insert(0, 0)        # [0, 1, 2, 3, 4, 5, 6]\n\n# Removendo elementos\nnumeros.remove(3)           # Remove o primeiro 3\nultimo = numeros.pop()      # Remove e retorna o último\n\n# Operações com listas\nprint(len(numeros))         # Tamanho da lista\nprint(max(numeros))         # Maior valor\nprint(min(numeros))         # Menor valor\nprint(sum(numeros))         # Soma dos valores\n\n# List comprehension\nquadrados = [x**2 for x in range(10)]\npares = [x for x in range(20) if x % 2 == 0]\n```\n\n### Dicionários\n```python\n# Criando dicionários\naluno = {\n    \"nome\": \"João\",\n    \"idade\": 20,\n    \"curso\": \"Ciência da Computação\",\n    \"notas\": [8.5, 9.0, 7.5]\n}\n\n# Acessando valores\nprint(aluno[\"nome\"])        # João\nprint(aluno.get(\"idade\"))   # 20\n\n# Adicionando/Modificando\naluno[\"semestre\"] = 3\naluno[\"idade\"] = 21\n\n# Iterando sobre dicionários\nfor chave, valor in aluno.items():\n    print(f\"{chave}: {valor}\")\n\n# Dicionário comprehension\nquadrados_dict = {x: x**2 for x in range(5)}\n```\n\n## Algoritmos Fundamentais\n\n### Busca Linear\n```python\ndef busca_linear(lista, elemento):\n    \"\"\"Busca um elemento em uma lista\"\"\"\n    for i, item in enumerate(lista):\n        if item == elemento:\n            return i\n    return -1\n\n# Exemplo de uso\nnumeros = [1, 3, 5, 7, 9, 11]\nindice = busca_linear(numeros, 7)\nprint(f\"Elemento 7 encontrado no índice: {indice}\")\n```\n\n### Ordenação por Bolha\n```python\ndef ordenacao_bolha(lista):\n    \"\"\"Ordena uma lista usando o algoritmo bubble sort\"\"\"\n    n = len(lista)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if lista[j] > lista[j + 1]:\n                lista[j], lista[j + 1] = lista[j + 1], lista[j]\n    return lista\n\n# Exemplo de uso\nnumeros = [64, 34, 25, 12, 22, 11, 90]\nnumeros_ordenados = ordenacao_bolha(numeros.copy())\nprint(f\"Lista original: {numeros}\")\nprint(f\"Lista ordenada: {numeros_ordenados}\")\n```\n\n### Fatorial\n```python\ndef fatorial(n):\n    \"\"\"Calcula o fatorial de um número\"\"\"\n    if n < 0:\n        return \"Erro: fatorial não definido para números negativos\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        resultado = 1\n        for i in range(2, n + 1):\n            resultado *= i\n        return resultado\n\n# Versão recursiva\ndef fatorial_recursivo(n):\n    if n < 0:\n        return \"Erro: fatorial não definido para números negativos\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * fatorial_recursivo(n - 1)\n\n# Exemplo de uso\nprint(f\"Fatorial de 5: {fatorial(5)}\")\nprint(f\"Fatorial de 5 (recursivo): {fatorial_recursivo(5)}\")\n```\n\n## Tratamento de Erros\n\n### Try/Except\n```python\ndef dividir(a, b):\n    try:\n        resultado = a / b\n        return resultado\n    except ZeroDivisionError:\n        return \"Erro: Divisão por zero não é permitida\"\n    except TypeError:\n        return \"Erro: Tipos de dados inválidos\"\n    except Exception as e:\n        return f\"Erro inesperado: {e}\"\n\n# Exemplos de uso\nprint(dividir(10, 2))    # 5.0\nprint(dividir(10, 0))    # Erro: Divisão por zero\nprint(dividir(10, \"a\"))  # Erro: Tipos de dados inválidos\n```\n\n## Exercícios Práticos\n\n### 1. Calculadora Simples\n```python\ndef calculadora():\n    print(\"Calculadora Simples\")\n    print(\"Operações: +, -, *, /\")\n    \n    try:\n        num1 = float(input(\"Digite o primeiro número: \"))\n        operacao = input(\"Digite a operação: \")\n        num2 = float(input(\"Digite o segundo número: \"))\n        \n        if operacao == '+':\n            resultado = num1 + num2\n        elif operacao == '-':\n            resultado = num1 - num2\n        elif operacao == '*':\n            resultado = num1 * num2\n        elif operacao == '/':\n            if num2 != 0:\n                resultado = num1 / num2\n            else:\n                return \"Erro: Divisão por zero\"\n        else:\n            return \"Operação inválida\"\n        \n        return f\"Resultado: {resultado}\"\n    \n    except ValueError:\n        return \"Erro: Digite apenas números válidos\"\n\n# calculadora()\n```\n\n### 2. Jogo de Adivinhação\n```python\nimport random\n\ndef jogo_adivinhacao():\n    numero_secreto = random.randint(1, 100)\n    tentativas = 0\n    max_tentativas = 7\n    \n    print(\"Jogo de Adivinhação!\")\n    print(\"Pensei em um número entre 1 e 100\")\n    print(f\"Você tem {max_tentativas} tentativas\")\n    \n    while tentativas < max_tentativas:\n        try:\n            palpite = int(input(\"Digite seu palpite: \"))\n            tentativas += 1\n            \n            if palpite == numero_secreto:\n                print(f\"Parabéns! Você acertou em {tentativas} tentativas!\")\n                return\n            \n            elif palpite < numero_secreto:\n                print(\"Muito baixo! Tente um número maior.\")\n            else:\n                print(\"Muito alto! Tente um número menor.\")\n            \n            print(f\"Tentativas restantes: {max_tentativas - tentativas}\")\n        \n        except ValueError:\n            print(\"Digite apenas números!\")\n            tentativas -= 1\n    \n    print(f\"Game Over! O número era {numero_secreto}\")\n\n# jogo_adivinhacao()\n```\n\n## Boas Práticas\n\n### 1. Nomes Descritivos\n```python\n# Ruim\na = 10\nb = 20\nc = a + b\n\n# Bom\nidade_usuario = 10\nidade_amigo = 20\nsoma_idades = idade_usuario + idade_amigo\n```\n\n### 2. Comentários Úteis\n```python\ndef calcular_imc(peso, altura):\n    \"\"\"\n    Calcula o Índice de Massa Corporal (IMC)\n    \n    Args:\n        peso (float): Peso em quilogramas\n        altura (float): Altura em metros\n    \n    Returns:\n        float: Valor do IMC\n    \"\"\"\n    imc = peso / (altura ** 2)\n    return round(imc, 2)\n```\n\n### 3. Modularização\n```python\n# Separando responsabilidades\ndef validar_idade(idade):\n    return isinstance(idade, int) and 0 <= idade <= 150\n\ndef validar_nome(nome):\n    return isinstance(nome, str) and len(nome.strip()) > 0\n\ndef cadastrar_usuario(nome, idade):\n    if not validar_nome(nome):\n        return \"Nome inválido\"\n    \n    if not validar_idade(idade):\n        return \"Idade inválida\"\n    \n    return f\"Usuário {nome} cadastrado com sucesso!\"\n```\n\n## Conclusão\n\nA lógica de programação é a base sólida para se tornar um desenvolvedor competente. Python oferece uma sintaxe clara e intuitiva para aprender esses conceitos fundamentais. Pratique regularmente, resolva problemas e construa projetos para consolidar seu conhecimento.\n\nLembre-se: a programação é uma habilidade que se desenvolve com prática constante. Comece com problemas simples e gradualmente aumente a complexidade dos desafios.",
  "author": {
    "id": "1",
    "name": "Fábio Ferreira",
    "avatar": "/avatars/fabio.jpg",
    "bio": "Desenvolvedor Full-Stack e criador de conteúdo técnico",
    "social": {
      "github": "https://github.com/FabioSonats",
      "linkedin": "https://www.linkedin.com/in/ferreira-f%C3%A1bio-98b4304a/",
      "portfolio": "https://fabiosonats.github.io/my-portifolio/"
    }
  },
  "publishedAt": "2024-01-20T14:30:00Z",
  "updatedAt": "2024-01-20T14:30:00Z",
  "tags": ["Python", "Lógica de Programação", "Algoritmos"],
  "category": "python",
  "language": "pt",
  "readingTime": 15,
  "featured": true
}
