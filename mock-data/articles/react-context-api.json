{
    "id": "9",
    "title": "React Context API: Gerenciamento de Estado Global",
    "slug": "react-context-api",
    "excerpt": "Aprenda a usar a Context API do React para gerenciar estado global de forma eficiente",
    "content": "# React Context API: Gerenciamento de Estado Global\n\nA Context API é uma funcionalidade do React que permite compartilhar dados entre componentes sem precisar passar props manualmente em cada nível da árvore de componentes.\n\n## O Problema do Prop Drilling\n\n```jsx\n// Sem Context - Prop Drilling\nfunction App() {\n  const [usuario, setUsuario] = useState({ nome: 'João', email: 'joao@email.com' });\n  \n  return (\n    <div>\n      <Header usuario={usuario} />\n      <Main usuario={usuario} />\n    </div>\n  );\n}\n\nfunction Header({ usuario }) {\n  return (\n    <header>\n      <Navigation usuario={usuario} />\n    </header>\n  );\n}\n\nfunction Navigation({ usuario }) {\n  return (\n    <nav>\n      <UserMenu usuario={usuario} />\n    </nav>\n  );\n}\n\nfunction UserMenu({ usuario }) {\n  return <div>Olá, {usuario.nome}!</div>;\n}\n```\n\n## Criando um Context\n\n```jsx\n// 1. Criar o Context\nimport { createContext } from 'react';\n\nconst UsuarioContext = createContext();\n\nexport default UsuarioContext;\n```\n\n## Provider Component\n\n```jsx\n// 2. Criar o Provider\nimport { useState, useContext } from 'react';\nimport UsuarioContext from './UsuarioContext';\n\nfunction UsuarioProvider({ children }) {\n  const [usuario, setUsuario] = useState({\n    nome: 'João',\n    email: 'joao@email.com',\n    logado: true\n  });\n\n  const login = (dadosUsuario) => {\n    setUsuario({ ...dadosUsuario, logado: true });\n  };\n\n  const logout = () => {\n    setUsuario({ logado: false });\n  };\n\n  const value = {\n    usuario,\n    login,\n    logout\n  };\n\n  return (\n    <UsuarioContext.Provider value={value}>\n      {children}\n    </UsuarioContext.Provider>\n  );\n}\n\nexport default UsuarioProvider;\n```\n\n## Hook Personalizado\n\n```jsx\n// 3. Criar hook personalizado\nimport { useContext } from 'react';\nimport UsuarioContext from './UsuarioContext';\n\nfunction useUsuario() {\n  const context = useContext(UsuarioContext);\n  \n  if (!context) {\n    throw new Error('useUsuario deve ser usado dentro de UsuarioProvider');\n  }\n  \n  return context;\n}\n\nexport default useUsuario;\n```\n\n## Usando o Context\n\n```jsx\n// 4. Usar o Context nos componentes\nimport { useUsuario } from './hooks/useUsuario';\n\nfunction App() {\n  return (\n    <UsuarioProvider>\n      <div>\n        <Header />\n        <Main />\n      </div>\n    </UsuarioProvider>\n  );\n}\n\nfunction Header() {\n  return (\n    <header>\n      <Navigation />\n    </header>\n  );\n}\n\nfunction Navigation() {\n  return (\n    <nav>\n      <UserMenu />\n    </nav>\n  );\n}\n\nfunction UserMenu() {\n  const { usuario, logout } = useUsuario();\n  \n  if (!usuario.logado) {\n    return <button>Login</button>;\n  }\n  \n  return (\n    <div>\n      <span>Olá, {usuario.nome}!</span>\n      <button onClick={logout}>Logout</button>\n    </div>\n  );\n}\n```\n\n## Context com useReducer\n\n```jsx\n// Para estados mais complexos, combine Context com useReducer\nimport { createContext, useContext, useReducer } from 'react';\n\n// Estado inicial\nconst initialState = {\n  usuario: null,\n  carregando: false,\n  erro: null\n};\n\n// Actions\nconst ACTIONS = {\n  LOGIN_INICIADO: 'LOGIN_INICIADO',\n  LOGIN_SUCESSO: 'LOGIN_SUCESSO',\n  LOGIN_ERRO: 'LOGIN_ERRO',\n  LOGOUT: 'LOGOUT'\n};\n\n// Reducer\nfunction usuarioReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.LOGIN_INICIADO:\n      return { ...state, carregando: true, erro: null };\n    \n    case ACTIONS.LOGIN_SUCESSO:\n      return {\n        ...state,\n        carregando: false,\n        usuario: action.payload,\n        erro: null\n      };\n    \n    case ACTIONS.LOGIN_ERRO:\n      return {\n        ...state,\n        carregando: false,\n        erro: action.payload\n      };\n    \n    case ACTIONS.LOGOUT:\n      return { ...state, usuario: null };\n    \n    default:\n      return state;\n  }\n}\n\n// Context\nconst UsuarioContext = createContext();\n\n// Provider\nfunction UsuarioProvider({ children }) {\n  const [state, dispatch] = useReducer(usuarioReducer, initialState);\n\n  const login = async (credenciais) => {\n    dispatch({ type: ACTIONS.LOGIN_INICIADO });\n    \n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credenciais)\n      });\n      \n      if (!response.ok) {\n        throw new Error('Credenciais inválidas');\n      }\n      \n      const usuario = await response.json();\n      dispatch({ type: ACTIONS.LOGIN_SUCESSO, payload: usuario });\n    } catch (erro) {\n      dispatch({ type: ACTIONS.LOGIN_ERRO, payload: erro.message });\n    }\n  };\n\n  const logout = () => {\n    dispatch({ type: ACTIONS.LOGOUT });\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout\n  };\n\n  return (\n    <UsuarioContext.Provider value={value}>\n      {children}\n    </UsuarioContext.Provider>\n  );\n}\n\n// Hook\nfunction useUsuario() {\n  const context = useContext(UsuarioContext);\n  if (!context) {\n    throw new Error('useUsuario deve ser usado dentro de UsuarioProvider');\n  }\n  return context;\n}\n\nexport { UsuarioProvider, useUsuario };\n```\n\n## Múltiplos Contexts\n\n```jsx\n// Separar contexts por responsabilidade\nconst TemaContext = createContext();\nconst CarrinhoContext = createContext();\nconst UsuarioContext = createContext();\n\nfunction App() {\n  return (\n    <TemaProvider>\n      <UsuarioProvider>\n        <CarrinhoProvider>\n          <div>\n            <Header />\n            <Main />\n          </div>\n        </CarrinhoProvider>\n      </UsuarioProvider>\n    </TemaProvider>\n  );\n}\n\n// Hook para combinar múltiplos contexts\nfunction useAppContext() {\n  const tema = useTema();\n  const usuario = useUsuario();\n  const carrinho = useCarrinho();\n  \n  return { tema, usuario, carrinho };\n}\n```\n\n## Context com TypeScript\n\n```tsx\n// Definir tipos\ninterface Usuario {\n  id: string;\n  nome: string;\n  email: string;\n}\n\ninterface UsuarioContextType {\n  usuario: Usuario | null;\n  login: (credenciais: LoginCredentials) => Promise<void>;\n  logout: () => void;\n  carregando: boolean;\n  erro: string | null;\n}\n\n// Context tipado\nconst UsuarioContext = createContext<UsuarioContextType | undefined>(undefined);\n\n// Provider tipado\nfunction UsuarioProvider({ children }: { children: React.ReactNode }) {\n  const [usuario, setUsuario] = useState<Usuario | null>(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState<string | null>(null);\n\n  const login = async (credenciais: LoginCredentials): Promise<void> => {\n    setCarregando(true);\n    setErro(null);\n    \n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(credenciais)\n      });\n      \n      if (!response.ok) {\n        throw new Error('Credenciais inválidas');\n      }\n      \n      const usuarioData: Usuario = await response.json();\n      setUsuario(usuarioData);\n    } catch (err) {\n      setErro(err instanceof Error ? err.message : 'Erro desconhecido');\n    } finally {\n      setCarregando(false);\n    }\n  };\n\n  const logout = (): void => {\n    setUsuario(null);\n  };\n\n  const value: UsuarioContextType = {\n    usuario,\n    login,\n    logout,\n    carregando,\n    erro\n  };\n\n  return (\n    <UsuarioContext.Provider value={value}>\n      {children}\n    </UsuarioContext.Provider>\n  );\n}\n\n// Hook tipado\nfunction useUsuario(): UsuarioContextType {\n  const context = useContext(UsuarioContext);\n  \n  if (context === undefined) {\n    throw new Error('useUsuario deve ser usado dentro de UsuarioProvider');\n  }\n  \n  return context;\n}\n```\n\n## Performance e Otimização\n\n```jsx\n// Memoizar o value do Provider para evitar re-renders desnecessários\nfunction UsuarioProvider({ children }) {\n  const [usuario, setUsuario] = useState(null);\n  \n  // Memoizar o value\n  const value = useMemo(() => ({\n    usuario,\n    login: (dados) => setUsuario(dados),\n    logout: () => setUsuario(null)\n  }), [usuario]);\n\n  return (\n    <UsuarioContext.Provider value={value}>\n      {children}\n    </UsuarioContext.Provider>\n  );\n}\n\n// Separar contexts para evitar re-renders\n// Context para dados que mudam frequentemente\nconst CarrinhoContext = createContext();\n\n// Context para dados que mudam raramente\nconst ConfiguracaoContext = createContext();\n```\n\n## Quando Usar Context API\n\n**Use Context API quando:**\n- Precisar compartilhar dados entre muitos componentes\n- Evitar prop drilling\n- Gerenciar estado global simples\n- Temas, autenticação, configurações\n\n**Não use Context API quando:**\n- Estado local é suficiente\n- Performance é crítica (use Redux/Zustand)\n- Estado é muito complexo\n- Precisa de time-travel debugging\n\n## Conclusão\n\nA Context API é uma ferramenta poderosa para gerenciamento de estado global no React. Use-a sabiamente, combinando com hooks personalizados e TypeScript para criar aplicações mais organizadas e maintíveis.",
    "author": {
        "id": "1",
        "name": "Fábio Ferreira",
        "avatar": "/avatars/fabio.jpg",
        "bio": "Desenvolvedor Full-Stack e criador de conteúdo técnico",
        "social": {
            "github": "https://github.com/FabioSonats",
            "linkedin": "https://www.linkedin.com/in/ferreira-f%C3%A1bio-98b4304a/",
            "portfolio": "https://fabiosonats.github.io/my-portifolio/"
        }
    },
    "publishedAt": "2025-01-26T18:00:00Z",
    "updatedAt": "2025-01-26T18:00:00Z",
    "tags": [
        "React",
        "Context API",
        "Estado Global",
        "Hooks"
    ],
    "category": "react",
    "language": "pt",
    "readingTime": 14,
    "featured": true
}
