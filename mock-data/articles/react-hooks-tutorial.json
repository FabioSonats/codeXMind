{
  "id": "1",
  "title": "React Hooks Tutorial",
  "slug": "react-hooks-tutorial",
  "excerpt": "Learn how to use React Hooks effectively in your applications",
  "content": "# React Hooks Tutorial\n\nReact Hooks revolutionized how we write React components by allowing us to use state and other React features in functional components.\n\n## What are React Hooks?\n\nHooks are functions that let you \"hook into\" React state and lifecycle features from function components. They were introduced in React 16.8.\n\n## Basic Hooks\n\n### useState\n\nThe `useState` hook allows you to add state to functional components:\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n### useEffect\n\nThe `useEffect` hook lets you perform side effects in functional components:\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n## Custom Hooks\n\nYou can create your own hooks to reuse stateful logic:\n\n```jsx\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(initialValue);\n\n  return { count, increment, decrement, reset };\n}\n\n// Usage\nfunction MyComponent() {\n  const { count, increment, decrement, reset } = useCounter(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n## Best Practices\n\n1. **Only call hooks at the top level** - Don't call hooks inside loops, conditions, or nested functions\n2. **Only call hooks from React functions** - Call hooks from React function components or custom hooks\n3. **Use multiple useState calls** - Don't try to put all state in a single useState call\n4. **Use useEffect for side effects** - Handle side effects like API calls, subscriptions, etc.\n\n## Conclusion\n\nReact Hooks provide a more direct API to the React concepts you already know. They make your code more readable and easier to test.",
  "author": {
    "id": "1",
    "name": "Fábio Ferreira",
    "avatar": "/avatars/fabio.jpg",
    "bio": "Desenvolvedor Full-Stack e criador de conteúdo técnico",
    "social": {
      "github": "https://github.com/FabioSonats",
      "linkedin": "https://www.linkedin.com/in/ferreira-f%C3%A1bio-98b4304a/",
      "portfolio": "https://fabiosonats.github.io/my-portifolio/"
    }
  },
  "publishedAt": "2024-01-15T10:30:00Z",
  "updatedAt": "2024-01-15T10:30:00Z",
  "tags": ["React", "JavaScript", "Hooks"],
  "language": "pt",
  "readingTime": 8,
  "featured": true
}
