{
  "id": "3",
  "title": "CSS Grid Layout Mastery",
  "slug": "css-grid-layout-mastery",
  "excerpt": "Master CSS Grid Layout for modern and responsive designs",
  "content": "# CSS Grid Layout Mastery\n\nO CSS Grid é uma das ferramentas mais poderosas para criar layouts modernos e responsivos. Ele permite criar layouts bidimensionais complexos com facilidade, oferecendo controle total sobre a posição e o tamanho dos elementos.\n\n## O que é CSS Grid?\n\nCSS Grid é um sistema de layout bidimensional que permite criar layouts complexos usando linhas e colunas. Diferente do Flexbox, que é unidimensional, o Grid permite controlar tanto a direção horizontal quanto vertical dos elementos.\n\n## Configuração Básica\n\nPara começar a usar CSS Grid, você precisa definir um container como grid:\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto 1fr auto;\n  gap: 20px;\n  height: 100vh;\n}\n```\n\n### Propriedades Principais\n\n- **grid-template-columns**: Define o número e tamanho das colunas\n- **grid-template-rows**: Define o número e tamanho das linhas\n- **gap**: Define o espaçamento entre os itens\n- **grid-template-areas**: Permite nomear áreas do grid\n\n## Unidades de Medida\n\n### fr (Fractional Unit)\nA unidade `fr` representa uma fração do espaço disponível:\n\n```css\n.grid {\n  grid-template-columns: 1fr 2fr 1fr; /* 25% 50% 25% */\n}\n```\n\n### repeat()\nA função `repeat()` simplifica a criação de grids repetitivos:\n\n```css\n.grid {\n  grid-template-columns: repeat(3, 1fr); /* 3 colunas iguais */\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsivo */\n}\n```\n\n## Posicionamento de Itens\n\n### Grid Lines\nVocê pode posicionar itens usando as linhas do grid:\n\n```css\n.item {\n  grid-column: 1 / 3; /* Da linha 1 à linha 3 */\n  grid-row: 2 / 4;    /* Da linha 2 à linha 4 */\n}\n```\n\n### Grid Areas\nUma forma mais semântica de posicionar elementos:\n\n```css\n.container {\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main main\"\n    \"footer footer footer\";\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.footer { grid-area: footer; }\n```\n\n## Layouts Responsivos\n\n### Auto-fit e Auto-fill\nCrie layouts que se adaptam automaticamente:\n\n```css\n.responsive-grid {\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n```\n\n### Media Queries\nCombine Grid com media queries para diferentes breakpoints:\n\n```css\n.grid {\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (min-width: 1024px) {\n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n```\n\n## Exemplos Práticos\n\n### Layout de Blog\n```css\n.blog-layout {\n  display: grid;\n  grid-template-areas:\n    \"header\"\n    \"nav\"\n    \"main\"\n    \"sidebar\"\n    \"footer\";\n  grid-template-rows: auto auto 1fr auto auto;\n  min-height: 100vh;\n}\n\n@media (min-width: 768px) {\n  .blog-layout {\n    grid-template-areas:\n      \"header header\"\n      \"nav nav\"\n      \"main sidebar\"\n      \"footer footer\";\n    grid-template-columns: 1fr 300px;\n    grid-template-rows: auto auto 1fr auto;\n  }\n}\n```\n\n### Galeria de Imagens\n```css\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.gallery img {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n```\n\n### Dashboard\n```css\n.dashboard {\n  display: grid;\n  grid-template-columns: 250px 1fr;\n  grid-template-rows: 60px 1fr;\n  grid-template-areas:\n    \"sidebar header\"\n    \"sidebar main\";\n  height: 100vh;\n}\n\n.sidebar { grid-area: sidebar; }\n.header { grid-area: header; }\n.main { \n  grid-area: main;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n  padding: 1rem;\n}\n```\n\n## Alinhamento\n\n### justify-items e align-items\nControle o alinhamento dos itens dentro de suas células:\n\n```css\n.grid {\n  justify-items: center; /* Alinhamento horizontal */\n  align-items: center;   /* Alinhamento vertical */\n}\n```\n\n### justify-content e align-content\nControle o alinhamento do grid como um todo:\n\n```css\n.grid {\n  justify-content: space-between;\n  align-content: center;\n}\n```\n\n## Dicas e Boas Práticas\n\n1. **Use Grid para layouts principais**: Grid é ideal para estruturas de página\n2. **Combine com Flexbox**: Use Flexbox para componentes internos\n3. **Nomes semânticos**: Use `grid-template-areas` para layouts mais legíveis\n4. **Teste responsividade**: Sempre teste em diferentes tamanhos de tela\n5. **Fallbacks**: Forneça fallbacks para navegadores mais antigos\n\n## Conclusão\n\nCSS Grid revolucionou a forma como criamos layouts web. Com sua flexibilidade e poder, você pode criar designs complexos e responsivos de forma mais eficiente. Pratique com os exemplos fornecidos e experimente diferentes combinações para dominar essa ferramenta essencial do desenvolvimento web moderno.",
  "author": {
    "id": "1",
    "name": "Fábio Ferreira",
    "avatar": "/avatars/fabio.jpg",
    "bio": "Desenvolvedor Full-Stack e criador de conteúdo técnico",
    "social": {
      "github": "https://github.com/FabioSonats",
      "linkedin": "https://www.linkedin.com/in/ferreira-f%C3%A1bio-98b4304a/",
      "portfolio": "https://fabiosonats.github.io/my-portifolio/"
    }
  },
  "publishedAt": "2024-01-05T09:15:00Z",
  "updatedAt": "2024-01-05T09:15:00Z",
  "tags": [
    "CSS",
    "Layout",
    "Grid"
  ],
  "category": "css",
  "language": "pt",
  "readingTime": 10,
  "featured": true
}