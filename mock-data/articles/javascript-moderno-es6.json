{
    "id": "6",
    "title": "JavaScript Moderno: ES6+ e Além",
    "slug": "javascript-moderno-es6",
    "excerpt": "Explore as funcionalidades modernas do JavaScript, desde ES6 até as mais recentes adições da linguagem",
    "content": "# JavaScript Moderno: ES6+ e Além\n\nO JavaScript evoluiu significativamente desde o ES6 (ES2015). Vamos explorar as funcionalidades modernas que tornaram a linguagem mais poderosa e expressiva.\n\n## Arrow Functions\n\n```javascript\n// Sintaxe tradicional\nfunction somar(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst somar = (a, b) => a + b;\n\n// Com múltiplas linhas\nconst processarDados = (dados) => {\n  const resultado = dados.map(item => item * 2);\n  return resultado.filter(item => item > 10);\n};\n```\n\n## Template Literals\n\n```javascript\nconst nome = 'João';\nconst idade = 30;\n\n// Antes\nconst mensagem = 'Olá, ' + nome + ', você tem ' + idade + ' anos.';\n\n// Agora\nconst mensagem = `Olá, ${nome}, você tem ${idade} anos.`;\n\n// Multilinhas\nconst html = `\n  <div class=\"card\">\n    <h2>${nome}</h2>\n    <p>Idade: ${idade}</p>\n  </div>\n`;\n```\n\n## Destructuring\n\n```javascript\n// Arrays\nconst [primeiro, segundo, ...resto] = [1, 2, 3, 4, 5];\nconsole.log(primeiro); // 1\nconsole.log(resto); // [3, 4, 5]\n\n// Objetos\nconst pessoa = { nome: 'Ana', idade: 25, cidade: 'São Paulo' };\nconst { nome, idade, cidade = 'Brasília' } = pessoa;\n\n// Renomeando\nconst { nome: nomeCompleto } = pessoa;\n```\n\n## Spread e Rest Operators\n\n```javascript\n// Spread em arrays\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combinado = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]\n\n// Spread em objetos\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst combinado = { ...obj1, ...obj2 };\n\n// Rest em parâmetros\nfunction somar(...numeros) {\n  return numeros.reduce((total, num) => total + num, 0);\n}\n\nsomar(1, 2, 3, 4); // 10\n```\n\n## Classes\n\n```javascript\nclass Pessoa {\n  constructor(nome, idade) {\n    this.nome = nome;\n    this.idade = idade;\n  }\n\n  apresentar() {\n    return `Olá, eu sou ${this.nome}`;\n  }\n\n  static compararIdades(p1, p2) {\n    return p1.idade - p2.idade;\n  }\n}\n\nclass Estudante extends Pessoa {\n  constructor(nome, idade, curso) {\n    super(nome, idade);\n    this.curso = curso;\n  }\n\n  estudar() {\n    return `${this.nome} está estudando ${this.curso}`;\n  }\n}\n```\n\n## Promises e Async/Await\n\n```javascript\n// Promises\nfunction buscarDados() {\n  return fetch('/api/dados')\n    .then(response => response.json())\n    .then(dados => {\n      console.log('Dados recebidos:', dados);\n      return dados;\n    })\n    .catch(erro => {\n      console.error('Erro:', erro);\n      throw erro;\n    });\n}\n\n// Async/Await\nasync function buscarDadosAsync() {\n  try {\n    const response = await fetch('/api/dados');\n    const dados = await response.json();\n    console.log('Dados recebidos:', dados);\n    return dados;\n  } catch (erro) {\n    console.error('Erro:', erro);\n    throw erro;\n  }\n}\n```\n\n## Modules (ES6)\n\n```javascript\n// math.js\nexport const somar = (a, b) => a + b;\nexport const multiplicar = (a, b) => a * b;\n\nexport default class Calculadora {\n  static dividir(a, b) {\n    return a / b;\n  }\n}\n\n// main.js\nimport Calculadora, { somar, multiplicar } from './math.js';\n\nconsole.log(somar(2, 3)); // 5\nconsole.log(Calculadora.dividir(10, 2)); // 5\n```\n\n## Map e Set\n\n```javascript\n// Map\nconst mapa = new Map();\nmapa.set('nome', 'João');\nmapa.set('idade', 30);\n\nconsole.log(mapa.get('nome')); // João\nconsole.log(mapa.has('idade')); // true\n\n// Set\nconst conjunto = new Set([1, 2, 3, 3, 4]);\nconsole.log(conjunto); // Set {1, 2, 3, 4}\nconjunto.add(5);\nconjunto.delete(2);\n```\n\n## Optional Chaining e Nullish Coalescing\n\n```javascript\n// Optional Chaining (?.)\nconst usuario = {\n  perfil: {\n    endereco: {\n      cidade: 'São Paulo'\n    }\n  }\n};\n\n// Antes\nconst cidade = usuario && usuario.perfil && usuario.perfil.endereco && usuario.perfil.endereco.cidade;\n\n// Agora\nconst cidade = usuario?.perfil?.endereco?.cidade;\n\n// Nullish Coalescing (??)\nconst nome = usuario.nome ?? 'Usuário Anônimo';\nconst idade = usuario.idade ?? 0;\n```\n\n## Array Methods Modernos\n\n```javascript\nconst numeros = [1, 2, 3, 4, 5];\n\n// find e findIndex\nconst par = numeros.find(n => n % 2 === 0); // 2\nconst indicePar = numeros.findIndex(n => n % 2 === 0); // 1\n\n// some e every\nconst temPar = numeros.some(n => n % 2 === 0); // true\nconst todosPares = numeros.every(n => n % 2 === 0); // false\n\n// flat e flatMap\nconst arrays = [[1, 2], [3, 4], [5]];\nconst plano = arrays.flat(); // [1, 2, 3, 4, 5]\n\nconst duplicado = arrays.flatMap(arr => arr.map(n => n * 2)); // [2, 4, 6, 8, 10]\n```\n\n## Conclusão\n\nO JavaScript moderno oferece ferramentas poderosas que tornam o código mais limpo, legível e eficiente. Dominar essas funcionalidades é essencial para qualquer desenvolvedor JavaScript atual.",
    "author": {
        "id": "1",
        "name": "Fábio Ferreira",
        "avatar": "/avatars/fabio.jpg",
        "bio": "Desenvolvedor Full-Stack e criador de conteúdo técnico",
        "social": {
            "github": "https://github.com/FabioSonats",
            "linkedin": "https://www.linkedin.com/in/ferreira-f%C3%A1bio-98b4304a/",
            "portfolio": "https://fabiosonats.github.io/my-portifolio/"
        }
    },
    "publishedAt": "2025-01-26T10:00:00Z",
    "updatedAt": "2025-01-26T10:00:00Z",
    "tags": [
        "JavaScript",
        "ES6",
        "ES2015",
        "Modern JavaScript"
    ],
    "category": "javascript",
    "language": "pt",
    "readingTime": 12,
    "featured": true
}
